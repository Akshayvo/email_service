/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { DefaultConfig } from './angulartics2-config';
import { ANGULARTICS2_TOKEN } from './angulartics2-token';
import { RouterlessTracking } from './routerless';
export class Angulartics2 {
    /**
     * @param {?} tracker
     * @param {?} setup
     */
    constructor(tracker, setup) {
        this.tracker = tracker;
        this.pageTrack = new ReplaySubject(10);
        this.eventTrack = new ReplaySubject(10);
        this.exceptionTrack = new ReplaySubject(10);
        this.setAlias = new ReplaySubject(10);
        this.setUsername = new ReplaySubject(10);
        this.setUserProperties = new ReplaySubject(10);
        this.setUserPropertiesOnce = new ReplaySubject(10);
        this.setSuperProperties = new ReplaySubject(10);
        this.setSuperPropertiesOnce = new ReplaySubject(10);
        this.userTimings = new ReplaySubject(10);
        const /** @type {?} */ defaultConfig = new DefaultConfig();
        this.settings = Object.assign({}, defaultConfig, setup.settings);
        this.settings.pageTracking = Object.assign({}, defaultConfig.pageTracking, setup.settings.pageTracking);
        this.tracker
            .trackLocation(this.settings)
            .subscribe((event) => this.trackUrlChange(event.url));
    }
    /**
     * filters all events when developer mode is true
     * @template T
     * @return {?}
     */
    filterDeveloperMode() {
        return filter((value, index) => !this.settings.developerMode);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    trackUrlChange(url) {
        if (this.settings.pageTracking.autoTrackVirtualPages && !this.matchesExcludedRoute(url)) {
            const /** @type {?} */ clearedUrl = this.clearUrl(url);
            let /** @type {?} */ path;
            if (this.settings.pageTracking.basePath.length) {
                path = this.settings.pageTracking.basePath + clearedUrl;
            }
            else {
                path = this.tracker.prepareExternalUrl(clearedUrl);
            }
            this.pageTrack.next({ path });
        }
    }
    /**
     * Use string literals or regular expressions to exclude routes
     * from automatic pageview tracking.
     *
     * @param {?} url location
     * @return {?}
     */
    matchesExcludedRoute(url) {
        for (const /** @type {?} */ excludedRoute of this.settings.pageTracking.excludedRoutes) {
            const /** @type {?} */ matchesRegex = excludedRoute instanceof RegExp && excludedRoute.test(url);
            if (matchesRegex || url.indexOf(/** @type {?} */ (excludedRoute)) !== -1) {
                return true;
            }
        }
        return false;
    }
    /**
     * Removes id's from tracked route.
     *  EX: `/project/12981/feature` becomes `/project/feature`
     *
     * @param {?} url current page path
     * @return {?}
     */
    clearUrl(url) {
        if (this.settings.pageTracking.clearIds || this.settings.pageTracking.clearQueryParams ||
            this.settings.pageTracking.clearHash) {
            return url
                .split('/')
                .map(part => this.settings.pageTracking.clearQueryParams ? part.split('?')[0] : part)
                .map(part => this.settings.pageTracking.clearHash ? part.split('#')[0] : part)
                .filter(part => !this.settings.pageTracking.clearIds || !part.match(this.settings.pageTracking.idsRegExp))
                .join('/');
        }
        return url;
    }
}
Angulartics2.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Angulartics2.ctorParameters = () => [
    { type: RouterlessTracking },
    { type: undefined, decorators: [{ type: Inject, args: [ANGULARTICS2_TOKEN,] }] }
];
function Angulartics2_tsickle_Closure_declarations() {
    /** @type {?} */
    Angulartics2.prototype.settings;
    /** @type {?} */
    Angulartics2.prototype.pageTrack;
    /** @type {?} */
    Angulartics2.prototype.eventTrack;
    /** @type {?} */
    Angulartics2.prototype.exceptionTrack;
    /** @type {?} */
    Angulartics2.prototype.setAlias;
    /** @type {?} */
    Angulartics2.prototype.setUsername;
    /** @type {?} */
    Angulartics2.prototype.setUserProperties;
    /** @type {?} */
    Angulartics2.prototype.setUserPropertiesOnce;
    /** @type {?} */
    Angulartics2.prototype.setSuperProperties;
    /** @type {?} */
    Angulartics2.prototype.setSuperPropertiesOnce;
    /** @type {?} */
    Angulartics2.prototype.userTimings;
    /** @type {?} */
    Angulartics2.prototype.tracker;
}

//# sourceMappingURL=data:application/json;base64,