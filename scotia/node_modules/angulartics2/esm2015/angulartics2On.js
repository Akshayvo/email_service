/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Injectable, Input, NgModule, Renderer2, } from '@angular/core';
import { Angulartics2 } from './angulartics2-core';
export class Angulartics2On {
    /**
     * @param {?} elRef
     * @param {?} angulartics2
     * @param {?} renderer
     */
    constructor(elRef, angulartics2, renderer) {
        this.elRef = elRef;
        this.angulartics2 = angulartics2;
        this.renderer = renderer;
        this.angularticsProperties = {};
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.renderer.listen(this.elRef.nativeElement, this.angulartics2On || 'click', (event) => this.eventTrack(event));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    eventTrack(event) {
        const /** @type {?} */ action = this.angularticsAction; // || this.inferEventName();
        const /** @type {?} */ properties = Object.assign({}, this.angularticsProperties, { eventType: event.type });
        if (this.angularticsCategory) {
            properties.category = this.angularticsCategory;
        }
        if (this.angularticsLabel) {
            properties.label = this.angularticsLabel;
        }
        if (this.angularticsValue) {
            properties.value = this.angularticsValue;
        }
        this.angulartics2.eventTrack.next({
            action,
            properties,
        });
    }
}
Angulartics2On.decorators = [
    { type: Injectable },
    { type: Directive, args: [{ selector: '[angulartics2On]' },] }
];
/** @nocollapse */
Angulartics2On.ctorParameters = () => [
    { type: ElementRef },
    { type: Angulartics2 },
    { type: Renderer2 }
];
Angulartics2On.propDecorators = {
    angulartics2On: [{ type: Input, args: ['angulartics2On',] }],
    angularticsAction: [{ type: Input }],
    angularticsCategory: [{ type: Input }],
    angularticsLabel: [{ type: Input }],
    angularticsValue: [{ type: Input }],
    angularticsProperties: [{ type: Input }]
};
function Angulartics2On_tsickle_Closure_declarations() {
    /** @type {?} */
    Angulartics2On.prototype.angulartics2On;
    /** @type {?} */
    Angulartics2On.prototype.angularticsAction;
    /** @type {?} */
    Angulartics2On.prototype.angularticsCategory;
    /** @type {?} */
    Angulartics2On.prototype.angularticsLabel;
    /** @type {?} */
    Angulartics2On.prototype.angularticsValue;
    /** @type {?} */
    Angulartics2On.prototype.angularticsProperties;
    /** @type {?} */
    Angulartics2On.prototype.elRef;
    /** @type {?} */
    Angulartics2On.prototype.angulartics2;
    /** @type {?} */
    Angulartics2On.prototype.renderer;
}
export class Angulartics2OnModule {
}
Angulartics2OnModule.decorators = [
    { type: NgModule, args: [{
                declarations: [Angulartics2On],
                exports: [Angulartics2On],
            },] }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcnRpY3MyT24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFydGljczIvIiwic291cmNlcyI6WyJhbmd1bGFydGljczJPbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLEtBQUssRUFDTCxRQUFRLEVBQ1IsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUluRCxNQUFNOzs7Ozs7SUFTSixZQUNVLE9BQ0EsY0FDQTtRQUZBLFVBQUssR0FBTCxLQUFLO1FBQ0wsaUJBQVksR0FBWixZQUFZO1FBQ1osYUFBUSxHQUFSLFFBQVE7cUNBTG9CLEVBQUU7S0FNbkM7Ozs7SUFFTCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUN4QixJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sRUFDOUIsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQ3pDLENBQUM7S0FDSDs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBWTtRQUNyQix1QkFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ3RDLHVCQUFNLFVBQVUscUJBQ1gsSUFBSSxDQUFDLHFCQUFxQixJQUM3QixTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksR0FDdEIsQ0FBQztRQUVGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7WUFDN0IsVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7U0FDaEQ7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQzFCLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1NBQzFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUMxQixVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUMxQztRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUNoQyxNQUFNO1lBQ04sVUFBVTtTQUNYLENBQUMsQ0FBQztLQUNKOzs7WUE5Q0YsVUFBVTtZQUNWLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTs7OztZQVR6QyxVQUFVO1lBTUgsWUFBWTtZQUZuQixTQUFTOzs7NkJBUVIsS0FBSyxTQUFDLGdCQUFnQjtnQ0FDdEIsS0FBSztrQ0FDTCxLQUFLOytCQUNMLEtBQUs7K0JBQ0wsS0FBSztvQ0FDTCxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0RSLE1BQU07OztZQUpMLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUM7Z0JBQzlCLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5qZWN0YWJsZSxcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxuICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhcnRpY3MyIH0gZnJvbSAnLi9hbmd1bGFydGljczItY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1thbmd1bGFydGljczJPbl0nIH0pXG5leHBvcnQgY2xhc3MgQW5ndWxhcnRpY3MyT24gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ2FuZ3VsYXJ0aWNzMk9uJykgYW5ndWxhcnRpY3MyT246IHN0cmluZztcbiAgQElucHV0KCkgYW5ndWxhcnRpY3NBY3Rpb246IHN0cmluZztcbiAgQElucHV0KCkgYW5ndWxhcnRpY3NDYXRlZ29yeTogc3RyaW5nO1xuICBASW5wdXQoKSBhbmd1bGFydGljc0xhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFuZ3VsYXJ0aWNzVmFsdWU6IHN0cmluZztcbiAgQElucHV0KCkgYW5ndWxhcnRpY3NQcm9wZXJ0aWVzOiBhbnkgPSB7fTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgYW5ndWxhcnRpY3MyOiBBbmd1bGFydGljczIsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyXG4gICkgeyB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKFxuICAgICAgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgdGhpcy5hbmd1bGFydGljczJPbiB8fCAnY2xpY2snLFxuICAgICAgKGV2ZW50OiBFdmVudCkgPT4gdGhpcy5ldmVudFRyYWNrKGV2ZW50KSxcbiAgICApO1xuICB9XG5cbiAgZXZlbnRUcmFjayhldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBhY3Rpb24gPSB0aGlzLmFuZ3VsYXJ0aWNzQWN0aW9uOyAvLyB8fCB0aGlzLmluZmVyRXZlbnROYW1lKCk7XG4gICAgY29uc3QgcHJvcGVydGllczogYW55ID0ge1xuICAgICAgLi4udGhpcy5hbmd1bGFydGljc1Byb3BlcnRpZXMsXG4gICAgICBldmVudFR5cGU6IGV2ZW50LnR5cGUsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmFuZ3VsYXJ0aWNzQ2F0ZWdvcnkpIHtcbiAgICAgIHByb3BlcnRpZXMuY2F0ZWdvcnkgPSB0aGlzLmFuZ3VsYXJ0aWNzQ2F0ZWdvcnk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFuZ3VsYXJ0aWNzTGFiZWwpIHtcbiAgICAgIHByb3BlcnRpZXMubGFiZWwgPSB0aGlzLmFuZ3VsYXJ0aWNzTGFiZWw7XG4gICAgfVxuICAgIGlmICh0aGlzLmFuZ3VsYXJ0aWNzVmFsdWUpIHtcbiAgICAgIHByb3BlcnRpZXMudmFsdWUgPSB0aGlzLmFuZ3VsYXJ0aWNzVmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5hbmd1bGFydGljczIuZXZlbnRUcmFjay5uZXh0KHtcbiAgICAgIGFjdGlvbixcbiAgICAgIHByb3BlcnRpZXMsXG4gICAgfSk7XG4gIH1cblxuICAvKnByaXZhdGUgaXNDb21tYW5kKCkge1xuICAgIHJldHVybiBbJ2E6JywgJ2J1dHRvbjonLCAnYnV0dG9uOmJ1dHRvbicsICdidXR0b246c3VibWl0JywgJ2lucHV0OmJ1dHRvbicsICdpbnB1dDpzdWJtaXQnXS5pbmRleE9mKFxuICAgICAgZ2V0RE9NKCkudGFnTmFtZSh0aGlzLmVsKS50b0xvd2VyQ2FzZSgpICsgJzonICsgKGdldERPTSgpLnR5cGUodGhpcy5lbCkgfHwgJycpKSA+PSAwO1xuICB9XG5cbiAgcHJpdmF0ZSBpbmZlckV2ZW50TmFtZSgpIHtcbiAgICBpZiAodGhpcy5pc0NvbW1hbmQoKSkgcmV0dXJuIGdldERPTSgpLmdldFRleHQodGhpcy5lbCkgfHwgZ2V0RE9NKCkuZ2V0VmFsdWUodGhpcy5lbCk7XG4gICAgcmV0dXJuIGdldERPTSgpLmdldFByb3BlcnR5KHRoaXMuZWwsICdpZCcpIHx8IGdldERPTSgpLmdldFByb3BlcnR5KHRoaXMuZWwsICduYW1lJykgfHwgZ2V0RE9NKCkudGFnTmFtZSh0aGlzLmVsKTtcbiAgfSovXG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0FuZ3VsYXJ0aWNzMk9uXSxcbiAgZXhwb3J0czogW0FuZ3VsYXJ0aWNzMk9uXSxcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhcnRpY3MyT25Nb2R1bGUge31cbiJdfQ==