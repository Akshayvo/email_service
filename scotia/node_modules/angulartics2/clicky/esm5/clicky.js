/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { Angulartics2 } from 'angulartics2';
var Angulartics2Clicky = /** @class */ (function () {
    function Angulartics2Clicky(angulartics2, titleService) {
        var _this = this;
        this.angulartics2 = angulartics2;
        this.titleService = titleService;
        if (typeof clicky === 'undefined') {
            console.warn('Angulartics 2 Clicky Plugin: clicky global not found');
        }
        this.angulartics2.pageTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe(function (x) { return _this.pageTrack(x.path); });
        this.angulartics2.eventTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe(function (x) { return _this.eventOrGoalTrack(x.action, x.properties); });
    }
    /**
     * Track Page in Clicky
     *
     * @param path location
     *
     * @link https://clicky.com/help/custom/manual#log
     */
    /**
     * Track Page in Clicky
     *
     * @link https://clicky.com/help/custom/manual#log
     * @param {?} path location
     *
     * @return {?}
     */
    Angulartics2Clicky.prototype.pageTrack = /**
     * Track Page in Clicky
     *
     * @link https://clicky.com/help/custom/manual#log
     * @param {?} path location
     *
     * @return {?}
     */
    function (path) {
        var /** @type {?} */ title = this.titleService.getTitle();
        clicky.log(path, title, 'pageview');
    };
    /**
     * Track Event Or Goal in Clicky
     *
     * @param action Action name
     * @param properties Definition of 'properties.goal' determines goal vs event tracking
     *
     * @link https://clicky.com/help/custom/manual#log
     * @link https://clicky.com/help/custom/manual#goal
     */
    /**
     * Track Event Or Goal in Clicky
     *
     * @link https://clicky.com/help/custom/manual#log
     * @link https://clicky.com/help/custom/manual#goal
     * @param {?} action Action name
     * @param {?} properties Definition of 'properties.goal' determines goal vs event tracking
     *
     * @return {?}
     */
    Angulartics2Clicky.prototype.eventOrGoalTrack = /**
     * Track Event Or Goal in Clicky
     *
     * @link https://clicky.com/help/custom/manual#log
     * @link https://clicky.com/help/custom/manual#goal
     * @param {?} action Action name
     * @param {?} properties Definition of 'properties.goal' determines goal vs event tracking
     *
     * @return {?}
     */
    function (action, properties) {
        if (typeof properties.goal === 'undefined') {
            var /** @type {?} */ title = properties.title || null;
            var /** @type {?} */ type = properties.type != null ? this.validateType(properties.type) : null;
            clicky.log(action, title, type);
        }
        else {
            var /** @type {?} */ goalId = properties.goal;
            var /** @type {?} */ revenue = properties.revenue;
            clicky.goal(goalId, revenue, !!properties.noQueue);
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    Angulartics2Clicky.prototype.validateType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var /** @type {?} */ EventType = ['pageview', 'click', 'download', 'outbound'];
        return EventType.indexOf(type) > -1 ? type : 'pageview';
    };
    Angulartics2Clicky.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Angulartics2Clicky.ctorParameters = function () { return [
        { type: Angulartics2 },
        { type: Title }
    ]; };
    return Angulartics2Clicky;
}());
export { Angulartics2Clicky };
function Angulartics2Clicky_tsickle_Closure_declarations() {
    /** @type {?} */
    Angulartics2Clicky.prototype.angulartics2;
    /** @type {?} */
    Angulartics2Clicky.prototype.titleService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2t5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcnRpY3MyL2NsaWNreS8iLCJzb3VyY2VzIjpbImNsaWNreS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQzs7SUFPMUMsNEJBQ1UsY0FDQTtRQUZWLGlCQWFDO1FBWlMsaUJBQVksR0FBWixZQUFZO1FBQ1osaUJBQVksR0FBWixZQUFZO1FBRXBCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDbEMsT0FBTyxDQUFDLElBQUksQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTO2FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLENBQUM7YUFDN0MsU0FBUyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVU7YUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUUsQ0FBQzthQUM3QyxTQUFTLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQTdDLENBQTZDLENBQUMsQ0FBQztLQUNwRTtJQUVEOzs7Ozs7T0FNRzs7Ozs7Ozs7O0lBQ0gsc0NBQVM7Ozs7Ozs7O0lBQVQsVUFBVSxJQUFZO1FBQ3BCLHFCQUFNLEtBQUssR0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztLQUNyQztJQUVEOzs7Ozs7OztPQVFHOzs7Ozs7Ozs7OztJQUNILDZDQUFnQjs7Ozs7Ozs7OztJQUFoQixVQUFpQixNQUFjLEVBQUUsVUFBcUM7UUFDcEUsRUFBRSxDQUFDLENBQUMsT0FBTyxVQUFVLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDM0MscUJBQU0sS0FBSyxHQUFXLFVBQVUsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO1lBQy9DLHFCQUFNLElBQUksR0FBVyxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN6RixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDakM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLHFCQUFNLE1BQU0sR0FBVyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLHFCQUFNLE9BQU8sR0FBVyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BEO0tBQ0Y7Ozs7O0lBRU8seUNBQVk7Ozs7Y0FBQyxJQUFZO1FBQy9CLHFCQUFNLFNBQVMsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQzs7O2dCQXBEM0QsVUFBVTs7OztnQkFMRixZQUFZO2dCQUZaLEtBQUs7OzZCQURkOztTQVNhLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRpdGxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IEFuZ3VsYXJ0aWNzMiB9IGZyb20gJ2FuZ3VsYXJ0aWNzMic7XG5pbXBvcnQgeyBDbGlja3lQcm9wZXJ0aWVzIH0gZnJvbSAnLi9jbGlja3kuaW50ZXJmYWNlcyc7XG5cbmRlY2xhcmUgdmFyIGNsaWNreTogYW55O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5ndWxhcnRpY3MyQ2xpY2t5IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhbmd1bGFydGljczI6IEFuZ3VsYXJ0aWNzMixcbiAgICBwcml2YXRlIHRpdGxlU2VydmljZTogVGl0bGUsXG4gICkge1xuICAgIGlmICh0eXBlb2YgY2xpY2t5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKCdBbmd1bGFydGljcyAyIENsaWNreSBQbHVnaW46IGNsaWNreSBnbG9iYWwgbm90IGZvdW5kJyk7XG4gICAgfVxuICAgIHRoaXMuYW5ndWxhcnRpY3MyLnBhZ2VUcmFja1xuICAgICAgLnBpcGUodGhpcy5hbmd1bGFydGljczIuZmlsdGVyRGV2ZWxvcGVyTW9kZSgpKVxuICAgICAgLnN1YnNjcmliZSgoeCkgPT4gdGhpcy5wYWdlVHJhY2soeC5wYXRoKSk7XG4gICAgdGhpcy5hbmd1bGFydGljczIuZXZlbnRUcmFja1xuICAgICAgLnBpcGUodGhpcy5hbmd1bGFydGljczIuZmlsdGVyRGV2ZWxvcGVyTW9kZSgpKVxuICAgICAgLnN1YnNjcmliZSgoeCkgPT4gdGhpcy5ldmVudE9yR29hbFRyYWNrKHguYWN0aW9uLCB4LnByb3BlcnRpZXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFjayBQYWdlIGluIENsaWNreVxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCBsb2NhdGlvblxuICAgKlxuICAgKiBAbGluayBodHRwczovL2NsaWNreS5jb20vaGVscC9jdXN0b20vbWFudWFsI2xvZ1xuICAgKi9cbiAgcGFnZVRyYWNrKHBhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IHRpdGxlOiBzdHJpbmcgPSB0aGlzLnRpdGxlU2VydmljZS5nZXRUaXRsZSgpO1xuICAgIGNsaWNreS5sb2cocGF0aCwgdGl0bGUsICdwYWdldmlldycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYWNrIEV2ZW50IE9yIEdvYWwgaW4gQ2xpY2t5XG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb24gQWN0aW9uIG5hbWVcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgRGVmaW5pdGlvbiBvZiAncHJvcGVydGllcy5nb2FsJyBkZXRlcm1pbmVzIGdvYWwgdnMgZXZlbnQgdHJhY2tpbmdcbiAgICpcbiAgICogQGxpbmsgaHR0cHM6Ly9jbGlja3kuY29tL2hlbHAvY3VzdG9tL21hbnVhbCNsb2dcbiAgICogQGxpbmsgaHR0cHM6Ly9jbGlja3kuY29tL2hlbHAvY3VzdG9tL21hbnVhbCNnb2FsXG4gICAqL1xuICBldmVudE9yR29hbFRyYWNrKGFjdGlvbjogc3RyaW5nLCBwcm9wZXJ0aWVzOiBQYXJ0aWFsPENsaWNreVByb3BlcnRpZXM+KSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzLmdvYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCB0aXRsZTogc3RyaW5nID0gcHJvcGVydGllcy50aXRsZSB8fCBudWxsO1xuICAgICAgY29uc3QgdHlwZTogc3RyaW5nID0gcHJvcGVydGllcy50eXBlICE9IG51bGwgPyB0aGlzLnZhbGlkYXRlVHlwZShwcm9wZXJ0aWVzLnR5cGUpIDogbnVsbDtcbiAgICAgIGNsaWNreS5sb2coYWN0aW9uLCB0aXRsZSwgdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGdvYWxJZDogc3RyaW5nID0gcHJvcGVydGllcy5nb2FsO1xuICAgICAgY29uc3QgcmV2ZW51ZTogbnVtYmVyID0gcHJvcGVydGllcy5yZXZlbnVlO1xuICAgICAgY2xpY2t5LmdvYWwoZ29hbElkLCByZXZlbnVlLCAhIXByb3BlcnRpZXMubm9RdWV1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVR5cGUodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBFdmVudFR5cGUgPSBbJ3BhZ2V2aWV3JywgJ2NsaWNrJywgJ2Rvd25sb2FkJywgJ291dGJvdW5kJ107XG4gICAgcmV0dXJuIEV2ZW50VHlwZS5pbmRleE9mKHR5cGUpID4gLTEgPyB0eXBlIDogJ3BhZ2V2aWV3JztcbiAgfVxufVxuIl19