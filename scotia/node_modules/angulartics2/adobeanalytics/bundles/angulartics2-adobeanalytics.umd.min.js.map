{"version":3,"sources":["ng://angulartics2/adobeanalytics/adobeanalytics.ts"],"names":["Angulartics2AdobeAnalytics","angulartics2","location","_this","this","pageTrack","pipe","filterDeveloperMode","subscribe","x","path","eventTrack","action","properties","setUserProperties","prototype","s","clearVars","t","pageName","linkName","disableDelay","setPageName","toUpperCase","tl","hashNdx","indexOf","length","substring","key","hasOwnProperty","Injectable","Angulartics2","Location"],"mappings":"wbAAA,IAAAA,EAAA,WAUE,SAAAA,EACUC,EACAC,GAFV,IAAAC,EAAAC,KACUA,KAAAH,aAAAA,EACAG,KAAAF,SAAAA,EAERE,KAAKH,aAAaI,UACfC,KAAKF,KAAKH,aAAaM,uBACvBC,UAAU,SAACC,GAAM,OAAAN,EAAKE,UAAUI,EAAEC,QACrCN,KAAKH,aAAaU,WACfL,KAAKF,KAAKH,aAAaM,uBACvBC,UAAU,SAACC,GAAM,OAAAN,EAAKQ,WAAWF,EAAEG,OAAQH,EAAEI,cAChDT,KAAKH,aAAaa,kBACfN,UAAU,SAACC,GAAM,OAAAN,EAAKW,kBAAkBL,YAG7CT,EAAAe,UAAAV,UAAA,SAAUK,GACS,oBAANM,GAAqBA,IAC9BA,EAAEC,YACFD,EAAEE,EAAE,CAACC,SAAUT,MAYnBV,EAAAe,UAAAJ,WAAA,SAAWC,EAAgBC,GAUzB,GAJKA,IACHA,EAAaA,GAAc,IAGZ,oBAANG,GAAqBA,IACJ,iBAAfH,GACTT,KAAKU,kBAAkBD,GAErBD,GAAQ,CAEV,IAAMQ,EAAYP,EAAsB,SAAIA,EAAqB,SAAID,EAI/DS,IAAiBR,EAAyB,cAAWT,KAEvDS,EAAmB,SACrBD,EAASC,EAAmB,QAE9BT,KAAKkB,cAEwB,aAAzBV,EAAOW,cACTP,EAAEQ,GAAGH,EAAc,IAAKD,GACU,SAAzBR,EAAOW,cAChBP,EAAEQ,GAAGH,EAAc,IAAKD,GAExBJ,EAAEQ,GAAGH,EAAc,IAAKD,KAMxBpB,EAAAe,UAAAO,uBACN,IAAMZ,EAAON,KAAKF,SAASQ,MAAK,GAC1Be,EAAUf,EAAKgB,QAAQ,KACf,EAAVD,GAAeA,EAAUf,EAAKiB,OAChCX,EAAEG,SAAWT,EAAKkB,UAAUH,EAAU,GAEtCT,EAAEG,SAAWT,GAIjBV,EAAAe,UAAAD,kBAAA,SAAkBD,GAChB,GAAiB,oBAANG,GAAqBA,GACJ,iBAAfH,EACT,IAAK,IAAMgB,KAAOhB,EACZA,EAAWiB,eAAeD,KAC5Bb,EAAEa,GAAOhB,EAAWgB,yBArF/BE,EAAAA,sDAJQC,EAAAA,oBAHAC,EAAAA,cAAT","sourcesContent":["import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\nimport { Angulartics2 } from 'angulartics2';\n\ndeclare const s: any;\n\n@Injectable()\nexport class Angulartics2AdobeAnalytics {\n\n  constructor(\n    private angulartics2: Angulartics2,\n    private location: Location,\n  ) {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n    this.angulartics2.setUserProperties\n      .subscribe((x) => this.setUserProperties(x));\n  }\n\n  pageTrack(path: string) {\n    if (typeof s !== 'undefined' && s) {\n      s.clearVars();\n      s.t({pageName: path});\n    }\n  }\n\n  /**\n   * Track Event in Adobe Analytics\n   *\n   * @param action associated with the event\n   * @param properties action detials\n   *\n   * @link https://marketing.adobe.com/resources/help/en_US/sc/implement/js_implementation.html\n   */\n  eventTrack(action: string, properties: any) {\n    // TODO: make interface\n    // @property {string} properties.category\n    // @property {string} properties.label\n    // @property {number} properties.value\n    // @property {boolean} properties.noninteraction\n    if (!properties) {\n      properties = properties || {};\n    }\n\n    if (typeof s !== 'undefined' && s) {\n      if (typeof properties === 'object') {\n        this.setUserProperties(properties);\n      }\n      if (action) {\n        // if linkName property is passed, use that; otherwise, the action is the linkName\n        const linkName = (properties['linkName']) ? properties['linkName'] : action;\n        // note that 'this' should refer the link element, but we can't get that in this function. example:\n        // <a href=\"http://anothersite.com\" onclick=\"s.tl(this,'e','AnotherSite',null)\">\n        // if disableDelay property is passed, use that to turn off/on the 500ms delay; otherwise, it uses this\n        const disableDelay = !!properties['disableDelay'] ? true : this;\n        // if action property is passed, use that; otherwise, the action remains unchanged\n        if (properties['action']) {\n          action = properties['action'];\n        }\n        this.setPageName();\n\n        if (action.toUpperCase() === 'DOWNLOAD') {\n          s.tl(disableDelay, 'd', linkName);\n        } else if (action.toUpperCase() === 'EXIT') {\n          s.tl(disableDelay, 'e', linkName);\n        } else {\n          s.tl(disableDelay, 'o', linkName);\n        }\n      }\n    }\n  }\n\n  private setPageName() {\n    const path = this.location.path(true);\n    const hashNdx = path.indexOf('#');\n    if (hashNdx > 0 && hashNdx < path.length) {\n      s.pageName = path.substring(hashNdx + 1);\n    } else {\n      s.pageName = path;\n    }\n  }\n\n  setUserProperties(properties: any) {\n    if (typeof s !== 'undefined' && s) {\n      if (typeof properties === 'object') {\n        for (const key in properties) {\n          if (properties.hasOwnProperty(key)) {\n            s[key] = properties[key];\n          }\n        }\n      }\n    }\n  }\n}\n"]}