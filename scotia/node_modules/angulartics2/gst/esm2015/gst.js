/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Angulartics2 } from 'angulartics2';
export class GoogleGlobalSiteTagDefaults {
    constructor() {
        this.trackingIds = [];
        if (typeof ga !== 'undefined' && ga) {
            // See: https://developers.google.com/analytics/devguides/collection/analyticsjs/ga-object-methods-reference
            ga.getAll().forEach((tracker) => {
                const /** @type {?} */ id = tracker.get('trackingId');
                if (id !== undefined) {
                    this.trackingIds.push(id);
                }
            });
        }
    }
}
function GoogleGlobalSiteTagDefaults_tsickle_Closure_declarations() {
    /** @type {?} */
    GoogleGlobalSiteTagDefaults.prototype.trackingIds;
}
export class Angulartics2GoogleGlobalSiteTag {
    /**
     * @param {?} angulartics2
     */
    constructor(angulartics2) {
        this.angulartics2 = angulartics2;
        const /** @type {?} */ defaults = new GoogleGlobalSiteTagDefaults;
        // Set the default settings for this module
        this.angulartics2.settings.gst = Object.assign({}, defaults, this.angulartics2.settings.gst);
        this.angulartics2.pageTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.pageTrack(x.path));
        this.angulartics2.eventTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.eventTrack(x.action, x.properties));
        this.angulartics2.exceptionTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.exceptionTrack(x));
    }
    /**
     * Manually track page view, see:
     *
     * https://developers.google.com/analytics/devguides/collection/gtagjs/single-page-applications#tracking_virtual_pageviews
     *
     * @param {?} path relative url
     * @return {?}
     */
    pageTrack(path) {
        if (typeof gtag !== 'undefined' && gtag) {
            for (const /** @type {?} */ id of this.angulartics2.settings.gst.trackingIds) {
                gtag('config', id, { 'page_path': path });
            }
        }
    }
    /**
     * Send interactions to gtag, i.e. for event tracking in Google Analytics. See:
     *
     * https://developers.google.com/analytics/devguides/collection/gtagjs/events
     *
     * @param {?} action associated with the event
     * @param {?} properties
     * @return {?}
     */
    eventTrack(action, properties) {
        // TODO: make interface
        //  @param {string} properties.category
        //  @param {string} [properties.label]
        //  @param {number} [properties.value]
        //  @param {boolean} [properties.noninteraction]
        // Set a default GST category
        properties = properties || {};
        if (typeof gtag !== 'undefined' && gtag) {
            gtag('event', action, Object.assign({ event_category: properties.category || 'interaction', event_label: properties.label, value: properties.value, non_interaction: properties.noninteraction }, properties.gstCustom));
        }
    }
    /**
     * Exception Track Event in GST. See:
     *
     * https://developers.google.com/analytics/devguides/collection/gtagjs/exceptions
     *
     * @param {?} properties
     * @return {?}
     */
    exceptionTrack(properties) {
        // TODO: make interface
        //  @param {Object} properties
        //  @param {string} [properties.description]
        //  @param {boolean} [properties.fatal]
        if (properties.fatal === undefined) {
            console.log('No "fatal" provided, sending with fatal=true');
            properties.fatal = true;
        }
        properties.exDescription = properties.event ? properties.event.stack : properties.description;
        this.eventTrack('exception', {
            gstCustom: Object.assign({ 'description': properties.exDescription, 'fatal': properties.fatal }, properties.gstCustom)
        });
    }
}
Angulartics2GoogleGlobalSiteTag.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Angulartics2GoogleGlobalSiteTag.ctorParameters = () => [
    { type: Angulartics2 }
];
function Angulartics2GoogleGlobalSiteTag_tsickle_Closure_declarations() {
    /** @type {?} */
    Angulartics2GoogleGlobalSiteTag.prototype.angulartics2;
}

//# sourceMappingURL=data:application/json;base64,