/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TransitionService } from '@uirouter/core';
import { Subject } from 'rxjs';
/**
 * Track Route changes for applications using UI-Router
 *
 * @link https://ui-router.github.io/ng2/docs/latest/
 *
 * referenced: https://github.com/ui-router/sample-app-angular/blob/9adb533b85c0f0fccef23968489cca0a5ec84654/src/app/util/ga.ts
 */
var UIRouterTracking = /** @class */ (function () {
    function UIRouterTracking(transitionService) {
        this.transitionService = transitionService;
    }
    /**
     * @param {?} trans
     * @return {?}
     */
    UIRouterTracking.prototype.path = /**
     * @param {?} trans
     * @return {?}
     */
    function (trans) {
        return trans.$to().url.format(trans.params());
    };
    /**
     * @param {?} settings
     * @return {?}
     */
    UIRouterTracking.prototype.trackLocation = /**
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        var _this = this;
        var /** @type {?} */ subject = new Subject();
        this.transitionService.onSuccess({}, function (trans) {
            return subject.next({ url: _this.path(trans) });
        }, {
            priority: -10000,
        });
        return subject;
    };
    /**
     * @param {?} url
     * @return {?}
     */
    UIRouterTracking.prototype.prepareExternalUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return url;
    };
    UIRouterTracking.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UIRouterTracking.ctorParameters = function () { return [
        { type: TransitionService }
    ]; };
    return UIRouterTracking;
}());
export { UIRouterTracking };
function UIRouterTracking_tsickle_Closure_declarations() {
    /** @type {?} */
    UIRouterTracking.prototype.transitionService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlyb3V0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFydGljczIvdWlyb3V0ZXJtb2R1bGUvIiwic291cmNlcyI6WyJ1aXJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvRCxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7Ozs7SUFhekMsMEJBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0tBQUk7Ozs7O0lBRTVELCtCQUFJOzs7O0lBQUosVUFBSyxLQUFpQjtRQUNwQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDL0M7Ozs7O0lBRUQsd0NBQWE7Ozs7SUFBYixVQUFjLFFBQVE7UUFBdEIsaUJBWUM7UUFYQyxxQkFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQXNCLENBQUM7UUFDbEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FDOUIsRUFBRSxFQUNGLFVBQUEsS0FBSztZQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2hELEVBQ0Q7WUFDRSxRQUFRLEVBQUUsQ0FBQyxLQUFLO1NBQ2pCLENBQ0YsQ0FBQztRQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDaEI7Ozs7O0lBRUQsNkNBQWtCOzs7O0lBQWxCLFVBQW1CLEdBQVc7UUFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUNaOztnQkF4QkYsVUFBVTs7OztnQkFiVSxpQkFBaUI7OzJCQUR0Qzs7U0FlYSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uU2VydmljZSB9IGZyb20gJ0B1aXJvdXRlci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBSb3V0ZXJsZXNzVHJhY2tpbmcsIFRyYWNrTmF2aWdhdGlvbkVuZCB9IGZyb20gJ2FuZ3VsYXJ0aWNzMic7XG5cbi8qKlxuICogVHJhY2sgUm91dGUgY2hhbmdlcyBmb3IgYXBwbGljYXRpb25zIHVzaW5nIFVJLVJvdXRlclxuICpcbiAqIEBsaW5rIGh0dHBzOi8vdWktcm91dGVyLmdpdGh1Yi5pby9uZzIvZG9jcy9sYXRlc3QvXG4gKlxuICogcmVmZXJlbmNlZDogaHR0cHM6Ly9naXRodWIuY29tL3VpLXJvdXRlci9zYW1wbGUtYXBwLWFuZ3VsYXIvYmxvYi85YWRiNTMzYjg1YzBmMGZjY2VmMjM5Njg0ODljY2EwYTVlYzg0NjU0L3NyYy9hcHAvdXRpbC9nYS50c1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVUlSb3V0ZXJUcmFja2luZyBpbXBsZW1lbnRzIFJvdXRlcmxlc3NUcmFja2luZyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNpdGlvblNlcnZpY2U6IFRyYW5zaXRpb25TZXJ2aWNlKSB7fVxuXG4gIHBhdGgodHJhbnM6IFRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gdHJhbnMuJHRvKCkudXJsLmZvcm1hdCh0cmFucy5wYXJhbXMoKSk7XG4gIH1cblxuICB0cmFja0xvY2F0aW9uKHNldHRpbmdzKTogT2JzZXJ2YWJsZTxUcmFja05hdmlnYXRpb25FbmQ+IHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8VHJhY2tOYXZpZ2F0aW9uRW5kPigpO1xuICAgIHRoaXMudHJhbnNpdGlvblNlcnZpY2Uub25TdWNjZXNzKFxuICAgICAge30sXG4gICAgICB0cmFucyA9PiB7XG4gICAgICAgIHJldHVybiBzdWJqZWN0Lm5leHQoeyB1cmw6IHRoaXMucGF0aCh0cmFucykgfSk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwcmlvcml0eTogLTEwMDAwLFxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiBzdWJqZWN0O1xuICB9XG5cbiAgcHJlcGFyZUV4dGVybmFsVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG4iXX0=