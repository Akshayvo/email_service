/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Angulartics2 } from 'angulartics2';
export class GoogleTagManagerDefaults {
    constructor() {
        this.userId = null;
    }
}
function GoogleTagManagerDefaults_tsickle_Closure_declarations() {
    /** @type {?} */
    GoogleTagManagerDefaults.prototype.userId;
}
export class Angulartics2GoogleTagManager {
    /**
     * @param {?} angulartics2
     */
    constructor(angulartics2) {
        this.angulartics2 = angulartics2;
        // The dataLayer needs to be initialized
        if (typeof dataLayer !== 'undefined' && dataLayer) {
            dataLayer = (/** @type {?} */ (window)).dataLayer = (/** @type {?} */ (window)).dataLayer || [];
        }
        const /** @type {?} */ defaults = new GoogleTagManagerDefaults;
        // Set the default settings for this module
        this.angulartics2.settings.gtm = Object.assign({}, defaults, this.angulartics2.settings.gtm);
        this.angulartics2.pageTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.pageTrack(x.path));
        this.angulartics2.eventTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.eventTrack(x.action, x.properties));
        this.angulartics2.exceptionTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.exceptionTrack(x));
        this.angulartics2.setUsername
            .subscribe((x) => this.setUsername(x));
    }
    /**
     * @param {?} path
     * @return {?}
     */
    pageTrack(path) {
        if (typeof dataLayer !== 'undefined' && dataLayer) {
            dataLayer.push({
                'event': 'Page View',
                'content-name': path,
                'userId': this.angulartics2.settings.gtm.userId
            });
        }
    }
    /**
     * Send interactions to the dataLayer, i.e. for event tracking in Google Analytics
     *
     * @param {?} action associated with the event
     * @param {?} properties
     * @return {?}
     */
    eventTrack(action, properties) {
        // TODO: make interface
        //  @param {string} properties.category
        //  @param {string} [properties.label]
        //  @param {number} [properties.value]
        //  @param {boolean} [properties.noninteraction]
        // Set a default GTM category
        properties = properties || {};
        if (typeof dataLayer !== 'undefined' && dataLayer) {
            dataLayer.push(Object.assign({ event: properties.event || 'interaction', target: properties.category || 'Event', action: action, label: properties.label, value: properties.value, interactionType: properties.noninteraction, userId: this.angulartics2.settings.gtm.userId }, properties.gtmCustom));
        }
    }
    /**
     * Exception Track Event in GTM
     *
     * @param {?} properties
     * @return {?}
     */
    exceptionTrack(properties) {
        // TODO: make interface
        //  @param {Object} properties
        //  @param {string} properties.appId
        //  @param {string} properties.appName
        //  @param {string} properties.appVersion
        //  @param {string} [properties.description]
        //  @param {boolean} [properties.fatal]
        if (!properties || !properties.appId || !properties.appName || !properties.appVersion) {
            console.error('Must be setted appId, appName and appVersion.');
            return;
        }
        if (properties.fatal === undefined) {
            console.log('No "fatal" provided, sending with fatal=true');
            properties.exFatal = true;
        }
        properties.exDescription = properties.event ? properties.event.stack : properties.description;
        this.eventTrack(`Exception thrown for ${properties.appName} <${properties.appId}@${properties.appVersion}>`, {
            'category': 'Exception',
            'label': properties.exDescription
        });
    }
    /**
     * Set userId for use with Universal Analytics User ID feature
     *
     * @param {?} userId used to identify user cross-device in Google Analytics
     * @return {?}
     */
    setUsername(userId) {
        this.angulartics2.settings.gtm.userId = userId;
    }
}
Angulartics2GoogleTagManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Angulartics2GoogleTagManager.ctorParameters = () => [
    { type: Angulartics2 }
];
function Angulartics2GoogleTagManager_tsickle_Closure_declarations() {
    /** @type {?} */
    Angulartics2GoogleTagManager.prototype.angulartics2;
}

//# sourceMappingURL=data:application/json;base64,