{"version":3,"sources":["ng://angulartics2/segment/segment.ts"],"names":["Angulartics2Segment","angulartics2","_this","this","pageTrack","pipe","filterDeveloperMode","subscribe","x","path","eventTrack","action","properties","setUserProperties","setUserPropertiesOnce","setAlias","prototype","analytics","page","e","ReferenceError","track","userId","identify","alias","Injectable","Angulartics2"],"mappings":"+WAAA,IAAAA,EAAA,WASE,SAAAA,EACUC,GADV,IAAAC,EAAAC,KACUA,KAAAF,aAAAA,EAERE,KAAKF,aAAaG,UACfC,KAAKF,KAAKF,aAAaK,uBACvBC,UAAU,SAACC,GAAM,OAAAN,EAAKE,UAAUI,EAAEC,QACrCN,KAAKF,aAAaS,WACfL,KAAKF,KAAKF,aAAaK,uBACvBC,UAAU,SAACC,GAAM,OAAAN,EAAKQ,WAAWF,EAAEG,OAAQH,EAAEI,cAChDT,KAAKF,aAAaY,kBACfN,UAAU,SAACC,GAAM,OAAAN,EAAKW,kBAAkBL,KAC3CL,KAAKF,aAAaa,sBACfP,UAAU,SAACC,GAAM,OAAAN,EAAKW,kBAAkBL,KAC3CL,KAAKF,aAAac,SACfR,UAAU,SAACC,GAAM,OAAAN,EAAKa,SAASP,YAQpCR,EAAAgB,UAAAZ,UAAA,SAAUK,GAER,IACEQ,UAAUC,KAAKT,GACf,MAAOU,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAUZnB,EAAAgB,UAAAN,WAAA,SAAWC,EAAgBC,GACzB,IACEK,UAAUI,MAAMV,EAAQC,GACxB,MAAOO,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAUZnB,EAAAgB,UAAAH,kBAAA,SAAkBD,GAChB,IACMA,EAAWU,OACbL,UAAUM,SAASX,EAAWU,OAAQV,GAEtCK,UAAUM,SAASX,GAErB,MAAOO,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAUZnB,EAAAgB,UAAAD,SAAA,SAASS,GACP,IACEP,UAAUO,MAAMA,GAChB,MAAOL,GACP,KAAMA,aAAaC,gBACjB,MAAMD,wBAhFbM,EAAAA,sDAJQC,EAAAA,kBAFT","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Angulartics2 } from 'angulartics2';\n\ndeclare var analytics: SegmentAnalytics.AnalyticsJS;\n\n@Injectable()\nexport class Angulartics2Segment {\n\n  constructor(\n    private angulartics2: Angulartics2\n  ) {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n    this.angulartics2.setUserProperties\n      .subscribe((x) => this.setUserProperties(x));\n    this.angulartics2.setUserPropertiesOnce\n      .subscribe((x) => this.setUserProperties(x));\n    this.angulartics2.setAlias\n      .subscribe((x) => this.setAlias(x));\n  }\n\n  /**\n   * https://segment.com/docs/libraries/analytics.js/#page\n   *\n   * analytics.page([category], [name], [properties], [options], [callback]);\n   */\n  pageTrack(path: string) {\n    // TODO : Support optional parameters where the parameter order and type changes their meaning\n    try {\n      analytics.page(path);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * https://segment.com/docs/libraries/analytics.js/#track\n   *\n   * analytics.track(event, [properties], [options], [callback]);\n   */\n  eventTrack(action: string, properties: any) {\n    try {\n      analytics.track(action, properties);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * https://segment.com/docs/libraries/analytics.js/#identify\n   *\n   * analytics.identify([userId], [traits], [options], [callback]);\n   */\n  setUserProperties(properties: any) {\n    try {\n      if (properties.userId) {\n        analytics.identify(properties.userId, properties);\n      } else {\n        analytics.identify(properties);\n      }\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * https://segment.com/docs/libraries/analytics.js/#alias\n   *\n   * analytics.alias(userId, previousId, options, callback);\n   */\n  setAlias(alias: any) {\n    try {\n      analytics.alias(alias);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n}\n"]}